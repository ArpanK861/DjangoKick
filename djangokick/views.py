import zipfile
import io
from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators.http import require_GET


def generate_project_zip(project_name):
    project_name = project_name.replace('/', '').replace('\\', '').strip()
    if not project_name or len(project_name) > 50:
        project_name = 'myapp'

    buffer = io.BytesIO()

    with zipfile.ZipFile(buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:

        manage_py = f'''#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "{project_name}.settings.development")
    from django.core.management import execute_from_command_line
    execute_from_command_line(sys.argv)
'''
        zip_file.writestr(f'{project_name}/manage.py', manage_py)

        settings_base = f'''from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = config("SECRET_KEY", default="django-insecure-change-me")
DEBUG = config("DEBUG", default=False, cast=bool)
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="*", cast=lambda v: [s.strip() for s in v.split(",")])

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "{project_name}.urls"

TEMPLATES = [
    {{
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {{
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        }},
    }},
]

WSGI_APPLICATION = "{project_name}.wsgi.application"

DATABASES = {{
    "default": {{
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }}
}}

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
'''
        zip_file.writestr(f'{project_name}/{project_name}/settings/base.py', settings_base)

        # development.py
        zip_file.writestr(f'{project_name}/{project_name}/settings/development.py', "from .base import *\nDEBUG = True\n")

        # production.py
        zip_file.writestr(f'{project_name}/{project_name}/settings/production.py', "from .base import *\nDEBUG = False\n")

        # urls.py
        zip_file.writestr(f'{project_name}/{project_name}/urls.py', 'from django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [path("admin/", admin.site.urls)]\n')

        # wsgi.py
        zip_file.writestr(f'{project_name}/{project_name}/wsgi.py', f'import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault("DJANGO_SETTINGS_MODULE", "{project_name}.settings.production")\napplication = get_wsgi_application()\n')

        # asgi.py
        zip_file.writestr(f'{project_name}/{project_name}/asgi.py', f'import os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault("DJANGO_SETTINGS_MODULE", "{project_name}.settings.production")\napplication = get_asgi_application()\n')

        # .env
        zip_file.writestr(f'{project_name}/.env', 'SECRET_KEY=change-me\nDEBUG=True\nDATABASE_URL=sqlite:///./db.sqlite3\n')

        # requirements.txt
        zip_file.writestr(f'{project_name}/requirements.txt', 'Django==5.1\npython-decouple==3.8\ndj-database-url==2.1.0\n')

        # README.md
        zip_file.writestr(f'{project_name}/README.md', f'# {project_name.title()}\n\nGenerated by DjangoKick\n')

        # Empty dirs
        for d in [f'{project_name}/templates', f'{project_name}/static/css']:
            zip_file.writestr(f'{d}/.gitkeep', '')

    buffer.seek(0)
    return buffer.getvalue()


@require_GET
def start(request, project_name):
    zip_bytes = generate_project_zip(project_name)
    response = HttpResponse(zip_bytes, content_type='application/zip')
    response['Content-Disposition'] = f'attachment; filename="{project_name}.zip"'
    return response


def home(request):
    return render(request, 'home.html')
